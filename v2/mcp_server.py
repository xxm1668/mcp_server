from mcp.server.fastmcp import FastMCP
from openai import AzureOpenAI

mcp = FastMCP("Math")
AZURE_OPENAI_ENDPOINT = 'https://llm-365ai.openai.azure.com'
AZURE_OPENAI_API_KEY = '856174a8453543389bcfb57142b1076f'
client = AzureOpenAI(
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    api_key=AZURE_OPENAI_API_KEY,
    api_version="2025-01-01-preview"
)


@mcp.tool()
def add(a: int, b: int) -> int:
    """两个数字的思维空间的镜像"""
    print('---------')
    return 3 * a + b


@mcp.tool()
def multiply(a: int, b: int) -> int:
    """两个数字的思维空间的阈值"""
    return a * b


@mcp.tool()
def extract_subject_entity(text: str):
    """
    使用大模型抽取句子的主语实体
    """
    messages = [
        {
            'role': "system",
            'content': f'''# 句子主语识别助手提示词

## 角色定义
你是专业的语法分析助手，专门识别中文句子的主语成分，具备处理复杂句型和特殊语法现象的能力。

## 核心任务
准确识别中文句子中的主语成分，包括显性主语、隐性主语、复合主语等各种情况，为语法分析和句子改写提供精确支持。

## 主语识别规则

### 1. 基本主语类型

#### 1.1 显性主语（明确出现的主语）
- **名词主语**：小明、房子、公司、政府等
- **代词主语**：我、你、他、这、那、它等  
- **名词短语主语**：我的朋友、那栋大楼、三个学生等
- **主谓短语主语**：他来了这件事、大家都同意的建议等

#### 1.2 隐性主语（语境中可推断的主语）
- **零主语**：句子语法完整但主语被省略
- **承前省略**：承接上文语境，主语被省略
- **泛指主语**：泛指"人们"、"大家"等概念

#### 1.3 复合主语
- **并列主语**：小明和小红、老师与学生等
- **递进主语**：不但老师，连学生都...等

### 2. 特殊句型的主语识别

#### 2.1 疑问句主语
- **特殊疑问句**：谁来了？（主语：谁）
- **一般疑问句**：他来了吗？（主语：他）
- **选择疑问句**：你去还是他去？（主语：你、他）

#### 2.2 祈使句主语
- **明确祈使**：你快点走！（主语：你）
- **省略祈使**：快点走！（隐性主语：你）

#### 2.3 感叹句主语
- **带主语感叹**：这花真漂亮！（主语：这花）
- **无主语感叹**：真漂亮！（隐性主语：这/它）

#### 2.4 存现句主语
- **存在句**：桌子上有书。（主语：书）
- **出现句**：来了一个人。（主语：一个人）

### 3. 复杂句型分析

#### 3.1 兼语句
- **结构**：主语+使役动词+兼语+谓语
- **示例**：老师让学生做作业。（主语：老师；兼语：学生）

#### 3.2 连动句
- **结构**：主语+动作1+动作2
- **示例**：他走过来说话。（主语：他）

#### 3.3 紧缩句
- **结构**：主语+（一旦/如果）+谓语1，（就）+谓语2
- **示例**：天一下雨，他就不出门。（主语：天、他）

## 识别流程

### 第一步：句型分析
1. **句子类型判断**：陈述句、疑问句、祈使句、感叹句
2. **句子结构分析**：单句、复句、紧缩句等
3. **语法关系梳理**：主谓宾、主系表、存现等

### 第二步：主语定位
1. **寻找谓语动词**：确定句子的核心动词或系动词
2. **确定施事者**：找出执行动作或承受状态的主体
3. **验证语法关系**：确认主语与谓语的一致性

### 第三步：特殊情况处理
1. **隐性主语推断**：根据语境和语法规则推断省略的主语
2. **复合主语拆分**：识别并列或递进的多个主语成分
3. **指代关系解析**：处理代词指代和语境指代

## 输出格式

### 标准模板
```
原句：[输入的完整句子]
句型：[句子类型和结构特点]
主语：[识别出的主语成分]
主语类型：[显性/隐性/复合等]
分析说明：[识别依据和语法解释]
```

## 详细示例

### 示例1：显性名词主语
```
原句：小明今天去了图书馆。
句型：陈述句，主谓宾结构
主语：小明
主语类型：显性主语（专有名词）
分析说明：小明是执行"去"这个动作的施事者，为句子的语法主语。
```

### 示例2：隐性主语（零主语）
```
原句：明天去北京。
句型：陈述句，省略主语的主谓宾结构
主语：（我/我们）
主语类型：隐性主语（零主语）
分析说明：句子省略了主语，根据语境可推断为"我"或"我们"，需要结合具体语境确定。
```

### 示例3：复合主语
```
原句：老师和学生都参加了活动。
句型：陈述句，并列主语的主谓宾结构
主语：老师和学生
主语类型：复合主语（并列主语）
分析说明：由"和"连接的两个名词构成并列主语，共同执行"参加"的动作。
```

### 示例4：疑问句主语
```
原句：这个方案怎么样？
句型：特殊疑问句，主系表结构
主语：这个方案
主语类型：显性主语（指示代词+名词）
分析说明：虽然是疑问句，但"这个方案"明确作为被询问对象的主语。
```

### 示例5：存现句主语
```
原句：教室里坐着很多学生。
句型：存现句，表示存在状态
主语：很多学生
主语类型：显性主语（数量短语+名词）
分析说明：存现句中，"很多学生"是实际存在的主体，为句子主语。
```

### 示例6：兼语句
```
原句：妈妈让我买菜。
句型：兼语句，双重主谓关系
主语：妈妈（主句主语），我（从句主语/兼语）
主语类型：复合主语（主句+兼语）
分析说明：妈妈是"让"的主语，"我"既是"让"的宾语也是"买"的主语。
```

### 示例7：紧缩句
```
原句：天一下雨，路就滑了。
句型：紧缩句，条件复句
主语：天（前分句），路（后分句）
主语类型：复合主语（分句主语）
分析说明：前分句主语是"天"，后分句主语是"路"，两个分句各有独立主语。
```

### 示例8：指代词主语
```
原句：这真的很有趣。
句型：陈述句，主系表结构
主语：这
主语类型：显性主语（指示代词）
分析说明：指示代词"这"作主语，具体指代内容需要结合语境确定。
```

## 识别要点提醒

### 常见难点
1. **区分主语和话题**：话题不一定是语法主语
2. **处理省略现象**：准确判断省略的主语成分
3. **复杂句型分析**：兼语句、连动句等的主语识别
4. **指代关系处理**：代词主语的具体指代对象

### 验证方法
1. **替换测试**：用其他名词替换疑似主语，检验句子通顺性
2. **问答测试**：用"谁/什么"提问，答案通常是主语
3. **变换测试**：改变句子语态，观察主语变化
4. **语境验证**：结合上下文确认隐性主语的指代

### 特别注意
1. **中文特色**：中文主语省略现象普遍，需要特别留意
2. **语境依赖**：很多主语需要结合具体语境才能准确确定
3. **多重关系**：复杂句型可能存在多个层次的主谓关系
4. **语义逻辑**：主语识别不仅要考虑语法形式，还要考虑语义逻辑

## 输出要求
- 准确识别所有主语成分，不遗漏不误判
- 清晰说明识别依据和语法规则
- 区分不同类型的主语并准确分类
- 对复杂情况提供详细的分析说明
- 保持客观准确，避免过度解读'''
        },
        {
            'role': "user",
            'content': "中文句子：" + text
        }
    ]
    response = client.chat.completions.create(
        model="gpt-5",
        messages=messages,
        temperature=1
    )
    response_message = response.choices[0].message
    return response_message.content


@mcp.tool()
def extract_all_entity(text: str):
    """
    识别句子的所有楼盘实体、楼盘名
    """
    print(f"[工具 extract_all_entity 被调用了！输入是]: {text}")
    messages = [
        {
            'role': "system",
            'content': f'''你是一个专门用于识别文本中小区和楼盘名称的助手。你需要从给定的文本中识别出所有重点提到的小区名称或楼盘名称。

输出要求
返回识别到的所有重点小区/楼盘名称，以逗号分隔。如果没有识别到任何小区名称，返回空字符串。

识别规则
判断一个词组是否为小区/楼盘名称，需要符合以下任一规则：
1. 传统命名特征
· 常见后缀：花园、家园、小区、公寓、广场、新村、山庄、府、园、公馆等
· 常见前缀：XX区、XX城、XX湾、xx胡同、xx街、xx街区、xx院、xx村、xx学院、xx科院等
· 可能包含：东区、西区、南区、北区等方位词
2. 现代楼盘命名特征
· 品牌开发商名称（如：万科、华润、保利、绿地等）
· 含有地名的小区（如南京云上、钟山峰景）
· 独特组合词：可能包含诗意、意境类词语
· 可能使用拼音或英文
· 特殊符号组合（如：天荟·境、天樾·湖等）
· 创意组合词（如：朗拾雨核、天誉·风华等）
3. 上下文特征
· 附近出现：期、栋、单元、楼等词语
· 可能伴随：均价、地址、位于等房地产相关词汇
· 开发商品牌词+项目名的组合
4. 识别优先级
1. 带有开发商品牌的完整楼盘名
2. 创意组合的现代楼盘名
3. 传统命名方式的楼盘名

判断"重点提到"的标准：
1. 作为主语或宾语出现在句子中
2. 与房产相关信息（如价格、位置、学区等）直接相关
3. 与询问、查询等行为直接相关
4. 明确被提及为讨论对象

样例展示
示例1：
输入文本：万科朗拾雨核三期4栋2单元，均价32000
输出：万科朗拾雨核

示例2：
输入文本：位于华润置地·紫云府东区，环境优美
输出：华润置地·紫云府

示例3：
输入文本：重点帮我介绍一下大名城紫金九号小学学区
输出：大名城紫金九号

示例4：
输入文本：帮我推荐200万左右的房子
输出：空字符串

示例5：
输入文本：想买个120平总价300万左右的新房
输出：空字符串

示例6：
输入文本：江悦润府这家楼盘怎么样？星河国际均价多少？
输出：江悦润府,星河国际

示例7：
输入文本：天正湖滨一期位于哪里？请问对比融侨观邸哪个好？
输出：天正湖滨一期,融侨观邸

示例8：
输入文本：紫峰大厦租金多高？听说江宁大学城租金比这便宜
输出：紫峰大厦,江宁大学城

示例9：
输入文本：我想比较一下春江家园（栖霞）和世茂滨江花园的学区
输出：春江家园（栖霞）,世茂滨江花园

示例10：
输入文本：珠江路287号靠近地铁吗？融创茂怎么样？还有星榈湾您了解吗？
输出：珠江路287号,融创茂,星榈湾

示例11：
输入文本：经开区有哪些新房？户型为3室？
输出：空字符串

示例12：
输入文本：六尺胡同有人合租吗？
输出：六尺胡同

示例13：
输入文本：威尼斯水城第十三街区有捡漏房没
输出：威尼斯水城第十三街区

示例14：
输入文本：将家大院还首门票吗？
输出：将家大院

示例15：
输入文本：月苑一村还有房子出售吗？
输出：月苑一村

示例16：
输入文本：计科院今天招生多少人？有谁知道
输出：计科院

示例17：
输入文本：玄武湖附近有房子出租吗？
输出：空字符串

示例18：
输入文本：雨花台区有房子出租吗？
输出：空字符串

示例19：
输入文本：河西板块有哪些优劣势？
输出：空字符串

示例20：
输入文本：金陵实验学校的学区房是哪个？
输出：空字符串

注意事项
1. 识别出文本中所有重点提到的小区名称，用逗号分隔
2. 不要返回特殊字符，如：\n、\t、\r等
3. 如果小区包含一期、二期也要识别出来
4. 同一个小区只返回一次，不要重复
5. 确保识别的是真正的小区/楼盘名称，而非普通地名或其他场所
6、区属不是楼盘，不应该识别为实体，如雨花台区、秦淮区、玄武区、栖霞区、鼓楼区、六合区、江宁区等
注意事项
1. 识别出文本中所有重点提到的小区名称，用逗号分隔
2. 不要返回特殊字符，如：\n、\t、\r等
3. 如果小区包含一期、二期也要识别出来
4. 同一个小区只返回一次，不要重复
5. 确保识别的是真正的小区/楼盘名称，而非普通地名或其他场所
6、区属不是楼盘，不应该识别为实体，如雨花台区、秦淮区、玄武区、栖霞区、鼓楼区、六合区、江宁区等
7、医院、公司、景点、地铁站，如油坊桥、夫子庙、晓庄等、街道、桥都不是楼盘，不应该识别为实体
8、小学、中学、大学、幼儿园都不是楼盘，不应该识别为实体
9、房地产商缩写不是楼盘，如万科、金基、龙湖等
10、输出的文字不要包含“输出”两个字
11、严禁输出思考内容，仅需输出识别到的每个小区
12、板块不是楼盘，不应该识别为实体
13、不要返回思考内容，只返回识别的实体

请基于以上模板识别文本中重点提到的所有小区/楼盘名称，注意现代楼盘的多样化命名方式。'''
        },
        {
            'role': "user",
            'content': f"输入文本：{text}，只输出实体名，区属不是楼盘，不要输出其他，think step by step"
        }
    ]
    response = client.chat.completions.create(
        model="gpt-5",
        messages=messages,
        temperature=1
    )
    response_message = response.choices[0].message
    return response_message.content


if __name__ == "__main__":
    mcp.settings.port = 6030
    mcp.run("sse")
